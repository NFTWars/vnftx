{
  "manifestVersion": "3.1",
  "impls": {
    "6f6751d11ef09f17fdb6ac4858a9cdc0a628ffbc69c2d8cf58141f163831178e": {
      "address": "0x1291Be112d480055DaFd8a610b7d1e203891C274",
      "txHash": "0x24b6d2655074789d94668d104fa45b63096f4fadb36e45765519b3999d917753",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "VNFTx",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTx.sol:112"
          },
          {
            "contract": "VNFTx",
            "label": "total",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:113"
          },
          {
            "contract": "VNFTx",
            "label": "vnft",
            "type": "t_contract(IVNFT)2649",
            "src": "contracts/VNFTx.sol:115"
          },
          {
            "contract": "VNFTx",
            "label": "muse",
            "type": "t_contract(IMuseToken)2484",
            "src": "contracts/VNFTx.sol:116"
          },
          {
            "contract": "VNFTx",
            "label": "addons",
            "type": "t_contract(IERC1155)1062",
            "src": "contracts/VNFTx.sol:117"
          },
          {
            "contract": "VNFTx",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:119"
          },
          {
            "contract": "VNFTx",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1098_storage)",
            "src": "contracts/VNFTx.sol:134"
          },
          {
            "contract": "VNFTx",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)805_storage)",
            "src": "contracts/VNFTx.sol:136"
          },
          {
            "contract": "VNFTx",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)805_storage",
            "src": "contracts/VNFTx.sol:137"
          },
          {
            "contract": "VNFTx",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTx.sol:140"
          },
          {
            "contract": "VNFTx",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTx.sol:141"
          },
          {
            "contract": "VNFTx",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:144"
          },
          {
            "contract": "VNFTx",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:145"
          },
          {
            "contract": "VNFTx",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:146"
          },
          {
            "contract": "VNFTx",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:147"
          },
          {
            "contract": "VNFTx",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:150"
          },
          {
            "contract": "VNFTx",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:151"
          },
          {
            "contract": "VNFTx",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:152"
          },
          {
            "contract": "VNFTx",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:153"
          },
          {
            "contract": "VNFTx",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:155"
          },
          {
            "contract": "VNFTx",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTx.sol:157"
          },
          {
            "contract": "VNFTx",
            "label": "_addonId",
            "type": "t_struct(Counter)465_storage",
            "src": "contracts/VNFTx.sol:160"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVNFT)2649": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)2484": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1062": {
            "label": "contract IERC1155"
          },
          "t_mapping(t_uint256,t_struct(Addon)1098_storage)": {
            "label": "mapping(uint256 => struct VNFTx.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)805_storage)": {
            "label": "mapping(uint256 => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)805_storage": {
            "label": "struct EnumerableSet.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)465_storage": {
            "label": "struct Counters.Counter"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "271f2961c1c9f331a630ddc64ecd6222704a5ad39ae3a720000d0248ff679e4b": {
      "address": "0xCD8a1C3ba11CF5ECfa6267617243239504a98d90",
      "txHash": "0xdf00b6d054c7a26d35269f84eb13b5f3f071c008c478cf3c7732ec23c0345b5d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "VNFTxV2",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV2.sol:112"
          },
          {
            "contract": "VNFTxV2",
            "label": "total",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:113"
          },
          {
            "contract": "VNFTxV2",
            "label": "vnft",
            "type": "t_contract(IVNFT)2592",
            "src": "contracts/VNFTxV2.sol:115"
          },
          {
            "contract": "VNFTxV2",
            "label": "muse",
            "type": "t_contract(IMuseToken)2427",
            "src": "contracts/VNFTxV2.sol:116"
          },
          {
            "contract": "VNFTxV2",
            "label": "addons",
            "type": "t_contract(IERC1155)1062",
            "src": "contracts/VNFTxV2.sol:117"
          },
          {
            "contract": "VNFTxV2",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:119"
          },
          {
            "contract": "VNFTxV2",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1098_storage)",
            "src": "contracts/VNFTxV2.sol:134"
          },
          {
            "contract": "VNFTxV2",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)805_storage)",
            "src": "contracts/VNFTxV2.sol:136"
          },
          {
            "contract": "VNFTxV2",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)805_storage",
            "src": "contracts/VNFTxV2.sol:137"
          },
          {
            "contract": "VNFTxV2",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV2.sol:140"
          },
          {
            "contract": "VNFTxV2",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV2.sol:141"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:144"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:145"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:146"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:147"
          },
          {
            "contract": "VNFTxV2",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:150"
          },
          {
            "contract": "VNFTxV2",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:151"
          },
          {
            "contract": "VNFTxV2",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:152"
          },
          {
            "contract": "VNFTxV2",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:153"
          },
          {
            "contract": "VNFTxV2",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:155"
          },
          {
            "contract": "VNFTxV2",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:157"
          },
          {
            "contract": "VNFTxV2",
            "label": "_addonId",
            "type": "t_struct(Counter)465_storage",
            "src": "contracts/VNFTxV2.sol:160"
          },
          {
            "contract": "VNFTxV2",
            "label": "testAdd",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:162"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVNFT)2592": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)2427": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1062": {
            "label": "contract IERC1155"
          },
          "t_mapping(t_uint256,t_struct(Addon)1098_storage)": {
            "label": "mapping(uint256 => struct VNFTxV2.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)805_storage)": {
            "label": "mapping(uint256 => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)805_storage": {
            "label": "struct EnumerableSet.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)465_storage": {
            "label": "struct Counters.Counter"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "4cec23a3d0a456835f4ba2e3054d5dbe91a7c18b9986859e0daf417914ed4a20": {
      "address": "0x2bdCC0de6bE1f7D2ee689a0342D76F52E8EFABa3",
      "txHash": "0xb0b0907101d794c1fd3b1e6fd02c56ffa29eaa724409205a04a54be4ff7efeb7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "VNFTxV2",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV2.sol:112"
          },
          {
            "contract": "VNFTxV2",
            "label": "total",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:113"
          },
          {
            "contract": "VNFTxV2",
            "label": "vnft",
            "type": "t_contract(IVNFT)2591",
            "src": "contracts/VNFTxV2.sol:115"
          },
          {
            "contract": "VNFTxV2",
            "label": "muse",
            "type": "t_contract(IMuseToken)2426",
            "src": "contracts/VNFTxV2.sol:116"
          },
          {
            "contract": "VNFTxV2",
            "label": "addons",
            "type": "t_contract(IERC1155)1062",
            "src": "contracts/VNFTxV2.sol:117"
          },
          {
            "contract": "VNFTxV2",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:119"
          },
          {
            "contract": "VNFTxV2",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1098_storage)",
            "src": "contracts/VNFTxV2.sol:134"
          },
          {
            "contract": "VNFTxV2",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)805_storage)",
            "src": "contracts/VNFTxV2.sol:136"
          },
          {
            "contract": "VNFTxV2",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)805_storage",
            "src": "contracts/VNFTxV2.sol:137"
          },
          {
            "contract": "VNFTxV2",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV2.sol:140"
          },
          {
            "contract": "VNFTxV2",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV2.sol:141"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:144"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:145"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:146"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:147"
          },
          {
            "contract": "VNFTxV2",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:150"
          },
          {
            "contract": "VNFTxV2",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:151"
          },
          {
            "contract": "VNFTxV2",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:152"
          },
          {
            "contract": "VNFTxV2",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:153"
          },
          {
            "contract": "VNFTxV2",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:155"
          },
          {
            "contract": "VNFTxV2",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:157"
          },
          {
            "contract": "VNFTxV2",
            "label": "_addonId",
            "type": "t_struct(Counter)465_storage",
            "src": "contracts/VNFTxV2.sol:160"
          },
          {
            "contract": "VNFTxV2",
            "label": "testAdd",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:162"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVNFT)2591": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)2426": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1062": {
            "label": "contract IERC1155"
          },
          "t_mapping(t_uint256,t_struct(Addon)1098_storage)": {
            "label": "mapping(uint256 => struct VNFTxV2.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)805_storage)": {
            "label": "mapping(uint256 => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)805_storage": {
            "label": "struct EnumerableSet.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)465_storage": {
            "label": "struct Counters.Counter"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1abf3fcf72b3210c00ced9dfd0fb5da1f06e34976bc1975aaddc5e60bb13e9f4": {
      "address": "0x7bc06c482DEAd17c0e297aFbC32f6e63d3846650",
      "txHash": "0x79f4310bfe463f7adf1753712dd776836cd5ee0b055a2cd14388d64a4ecd9047",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:18"
          },
          {
            "contract": "OwnableUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol:78"
          },
          {
            "contract": "VNFTxV2",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV2.sol:112"
          },
          {
            "contract": "VNFTxV2",
            "label": "total",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:113"
          },
          {
            "contract": "VNFTxV2",
            "label": "vnft",
            "type": "t_contract(IVNFT)2601",
            "src": "contracts/VNFTxV2.sol:115"
          },
          {
            "contract": "VNFTxV2",
            "label": "muse",
            "type": "t_contract(IMuseToken)2436",
            "src": "contracts/VNFTxV2.sol:116"
          },
          {
            "contract": "VNFTxV2",
            "label": "addons",
            "type": "t_contract(IERC1155)1062",
            "src": "contracts/VNFTxV2.sol:117"
          },
          {
            "contract": "VNFTxV2",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:119"
          },
          {
            "contract": "VNFTxV2",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1098_storage)",
            "src": "contracts/VNFTxV2.sol:134"
          },
          {
            "contract": "VNFTxV2",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)805_storage)",
            "src": "contracts/VNFTxV2.sol:136"
          },
          {
            "contract": "VNFTxV2",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)805_storage",
            "src": "contracts/VNFTxV2.sol:137"
          },
          {
            "contract": "VNFTxV2",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV2.sol:140"
          },
          {
            "contract": "VNFTxV2",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV2.sol:141"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:144"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:145"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:146"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:147"
          },
          {
            "contract": "VNFTxV2",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:150"
          },
          {
            "contract": "VNFTxV2",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:151"
          },
          {
            "contract": "VNFTxV2",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:152"
          },
          {
            "contract": "VNFTxV2",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:153"
          },
          {
            "contract": "VNFTxV2",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:155"
          },
          {
            "contract": "VNFTxV2",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:157"
          },
          {
            "contract": "VNFTxV2",
            "label": "_addonId",
            "type": "t_struct(Counter)465_storage",
            "src": "contracts/VNFTxV2.sol:160"
          },
          {
            "contract": "VNFTxV2",
            "label": "testAdd",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:162"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IVNFT)2601": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)2436": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1062": {
            "label": "contract IERC1155"
          },
          "t_mapping(t_uint256,t_struct(Addon)1098_storage)": {
            "label": "mapping(uint256 => struct VNFTxV2.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)805_storage)": {
            "label": "mapping(uint256 => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)805_storage": {
            "label": "struct EnumerableSet.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)465_storage": {
            "label": "struct Counters.Counter"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2668392603a213cc6817414eda066e05e2e70bb717c7ba7a3c741814be2b5c50": {
      "address": "0x8f86403A4DE0BB5791fa46B8e795C547942fE4Cf",
      "txHash": "0xe96b9a70d5f9e484f467469f24cbb0007ee06a6764a15d4dc1f4c898821092f8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "VNFTxV2",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV2.sol:113"
          },
          {
            "contract": "VNFTxV2",
            "label": "vnft",
            "type": "t_contract(IVNFT)3204",
            "src": "contracts/VNFTxV2.sol:115"
          },
          {
            "contract": "VNFTxV2",
            "label": "muse",
            "type": "t_contract(IMuseToken)3039",
            "src": "contracts/VNFTxV2.sol:116"
          },
          {
            "contract": "VNFTxV2",
            "label": "addons",
            "type": "t_contract(IERC1155)2807",
            "src": "contracts/VNFTxV2.sol:117"
          },
          {
            "contract": "VNFTxV2",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:119"
          },
          {
            "contract": "VNFTxV2",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)2843_storage)",
            "src": "contracts/VNFTxV2.sol:134"
          },
          {
            "contract": "VNFTxV2",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)1044_storage)",
            "src": "contracts/VNFTxV2.sol:136"
          },
          {
            "contract": "VNFTxV2",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)1044_storage",
            "src": "contracts/VNFTxV2.sol:137"
          },
          {
            "contract": "VNFTxV2",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV2.sol:140"
          },
          {
            "contract": "VNFTxV2",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV2.sol:141"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:144"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:145"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:146"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:147"
          },
          {
            "contract": "VNFTxV2",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:150"
          },
          {
            "contract": "VNFTxV2",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:151"
          },
          {
            "contract": "VNFTxV2",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:152"
          },
          {
            "contract": "VNFTxV2",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:153"
          },
          {
            "contract": "VNFTxV2",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:155"
          },
          {
            "contract": "VNFTxV2",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:157"
          },
          {
            "contract": "VNFTxV2",
            "label": "_addonId",
            "type": "t_struct(Counter)704_storage",
            "src": "contracts/VNFTxV2.sol:160"
          },
          {
            "contract": "VNFTxV2",
            "label": "newVar",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:178"
          },
          {
            "contract": "VNFTxV2",
            "label": "testVar",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:180"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVNFT)3204": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)3039": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)2807": {
            "label": "contract IERC1155"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Addon)2843_storage)": {
            "label": "mapping(uint256 => struct VNFTxV2.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)1044_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)1044_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)704_storage": {
            "label": "struct CountersUpgradeable.Counter"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "5c6602fd9935e52e1611bf97744c046039e2b4497da1c9685002a6ca9b800a82": {
      "address": "0x5eb3Bc0a489C5A8288765d2336659EbCA68FCd00",
      "txHash": "0x6537acdab7bc669d2e17b0da4de5874be94c9cffd6267a8be1923702e2969904",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "VNFTxV2",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV2.sol:114"
          },
          {
            "contract": "VNFTxV2",
            "label": "vnft",
            "type": "t_contract(IVNFT)4259",
            "src": "contracts/VNFTxV2.sol:116"
          },
          {
            "contract": "VNFTxV2",
            "label": "muse",
            "type": "t_contract(IMuseToken)4094",
            "src": "contracts/VNFTxV2.sol:117"
          },
          {
            "contract": "VNFTxV2",
            "label": "addons",
            "type": "t_contract(IERC1155)2693",
            "src": "contracts/VNFTxV2.sol:118"
          },
          {
            "contract": "VNFTxV2",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:120"
          },
          {
            "contract": "VNFTxV2",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)2729_storage)",
            "src": "contracts/VNFTxV2.sol:135"
          },
          {
            "contract": "VNFTxV2",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)1044_storage)",
            "src": "contracts/VNFTxV2.sol:137"
          },
          {
            "contract": "VNFTxV2",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)1044_storage",
            "src": "contracts/VNFTxV2.sol:138"
          },
          {
            "contract": "VNFTxV2",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV2.sol:141"
          },
          {
            "contract": "VNFTxV2",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV2.sol:142"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:145"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:146"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:147"
          },
          {
            "contract": "VNFTxV2",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:148"
          },
          {
            "contract": "VNFTxV2",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:151"
          },
          {
            "contract": "VNFTxV2",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:152"
          },
          {
            "contract": "VNFTxV2",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:153"
          },
          {
            "contract": "VNFTxV2",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:154"
          },
          {
            "contract": "VNFTxV2",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:156"
          },
          {
            "contract": "VNFTxV2",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV2.sol:158"
          },
          {
            "contract": "VNFTxV2",
            "label": "_addonId",
            "type": "t_struct(Counter)704_storage",
            "src": "contracts/VNFTxV2.sol:161"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVNFT)4259": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)4094": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)2693": {
            "label": "contract IERC1155"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Addon)2729_storage)": {
            "label": "mapping(uint256 => struct VNFTxV2.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)1044_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)1044_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)704_storage": {
            "label": "struct CountersUpgradeable.Counter"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "2fccf1abe4124519a94a093500c1cf23463b5973f0d23461a67adf80b2dc41a9": {
      "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
      "txHash": "0xe2ee0421c9a53fe12d2dab76a3ab3b945c78e580d7fca36a0d6853b4ce0dd5c5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "VNFTxV4",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV4.sol:114"
          },
          {
            "contract": "VNFTxV4",
            "label": "vnft",
            "type": "t_contract(IVNFT)3363",
            "src": "contracts/VNFTxV4.sol:116"
          },
          {
            "contract": "VNFTxV4",
            "label": "muse",
            "type": "t_contract(IMuseToken)3198",
            "src": "contracts/VNFTxV4.sol:117"
          },
          {
            "contract": "VNFTxV4",
            "label": "addons",
            "type": "t_contract(IERC1155)1302",
            "src": "contracts/VNFTxV4.sol:118"
          },
          {
            "contract": "VNFTxV4",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:120"
          },
          {
            "contract": "VNFTxV4",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1338_storage)",
            "src": "contracts/VNFTxV4.sol:135"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)1044_storage)",
            "src": "contracts/VNFTxV4.sol:137"
          },
          {
            "contract": "VNFTxV4",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)1044_storage",
            "src": "contracts/VNFTxV4.sol:138"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:141"
          },
          {
            "contract": "VNFTxV4",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:142"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:145"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:146"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:147"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:148"
          },
          {
            "contract": "VNFTxV4",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:151"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:152"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:153"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:154"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:156"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:158"
          },
          {
            "contract": "VNFTxV4",
            "label": "_addonId",
            "type": "t_struct(Counter)704_storage",
            "src": "contracts/VNFTxV4.sol:161"
          },
          {
            "contract": "VNFTxV4",
            "label": "cashbackPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:181"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpLostOnBattle",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:183"
          },
          {
            "contract": "VNFTxV4",
            "label": "timesAttacked",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:184"
          },
          {
            "contract": "VNFTxV4",
            "label": "randomBlockSize",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:185"
          },
          {
            "contract": "VNFTxV4",
            "label": "toReceiveCashback",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/VNFTxV4.sol:187"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVNFT)3363": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)3198": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1302": {
            "label": "contract IERC1155"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Addon)1338_storage)": {
            "label": "mapping(uint256 => struct VNFTxV4.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)1044_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)1044_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)704_storage": {
            "label": "struct CountersUpgradeable.Counter"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "1014615a347cc5408960e1608bf45895b8d74347c4360daac0a48fb79e9a374c": {
      "address": "0x871ACbEabBaf8Bed65c22ba7132beCFaBf8c27B5",
      "txHash": "0x9550a3cdf776f2a0fa7e7f3125aba3c9f67e1cdcbc2e81b804c6e9986101015d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "VNFTxV4",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV4.sol:114"
          },
          {
            "contract": "VNFTxV4",
            "label": "vnft",
            "type": "t_contract(IVNFT)3353",
            "src": "contracts/VNFTxV4.sol:116"
          },
          {
            "contract": "VNFTxV4",
            "label": "muse",
            "type": "t_contract(IMuseToken)3188",
            "src": "contracts/VNFTxV4.sol:117"
          },
          {
            "contract": "VNFTxV4",
            "label": "addons",
            "type": "t_contract(IERC1155)1302",
            "src": "contracts/VNFTxV4.sol:118"
          },
          {
            "contract": "VNFTxV4",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:120"
          },
          {
            "contract": "VNFTxV4",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1338_storage)",
            "src": "contracts/VNFTxV4.sol:135"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)1044_storage)",
            "src": "contracts/VNFTxV4.sol:137"
          },
          {
            "contract": "VNFTxV4",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)1044_storage",
            "src": "contracts/VNFTxV4.sol:138"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:141"
          },
          {
            "contract": "VNFTxV4",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:142"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:145"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:146"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:147"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:148"
          },
          {
            "contract": "VNFTxV4",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:151"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:152"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:153"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:154"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:156"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:158"
          },
          {
            "contract": "VNFTxV4",
            "label": "_addonId",
            "type": "t_struct(Counter)704_storage",
            "src": "contracts/VNFTxV4.sol:161"
          },
          {
            "contract": "VNFTxV4",
            "label": "cashbackPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:181"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpLostOnBattle",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:183"
          },
          {
            "contract": "VNFTxV4",
            "label": "timesAttacked",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:184"
          },
          {
            "contract": "VNFTxV4",
            "label": "randomBlockSize",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:185"
          },
          {
            "contract": "VNFTxV4",
            "label": "toReceiveCashback",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/VNFTxV4.sol:187"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVNFT)3353": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)3188": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1302": {
            "label": "contract IERC1155"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Addon)1338_storage)": {
            "label": "mapping(uint256 => struct VNFTxV4.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)1044_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)1044_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)704_storage": {
            "label": "struct CountersUpgradeable.Counter"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "3b66ec9fc47f22f440b12013a96886b36726895f6b35581f9f96d86ccda550fc": {
      "address": "0xcfbD78F3D57B620ddEff73F193dD5Bf595a730db",
      "txHash": "0x9a772603a605abb4d421c4dbd735b25076ef7accd117f9e7c259c6cdf2ef9b51",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "VNFTxV4",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV4.sol:114"
          },
          {
            "contract": "VNFTxV4",
            "label": "vnft",
            "type": "t_contract(IVNFT)3364",
            "src": "contracts/VNFTxV4.sol:116"
          },
          {
            "contract": "VNFTxV4",
            "label": "muse",
            "type": "t_contract(IMuseToken)3199",
            "src": "contracts/VNFTxV4.sol:117"
          },
          {
            "contract": "VNFTxV4",
            "label": "addons",
            "type": "t_contract(IERC1155)1302",
            "src": "contracts/VNFTxV4.sol:118"
          },
          {
            "contract": "VNFTxV4",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:120"
          },
          {
            "contract": "VNFTxV4",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1338_storage)",
            "src": "contracts/VNFTxV4.sol:135"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)1044_storage)",
            "src": "contracts/VNFTxV4.sol:137"
          },
          {
            "contract": "VNFTxV4",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)1044_storage",
            "src": "contracts/VNFTxV4.sol:138"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:141"
          },
          {
            "contract": "VNFTxV4",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:142"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:145"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:146"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:147"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:148"
          },
          {
            "contract": "VNFTxV4",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:151"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:152"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:153"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:154"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:156"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:158"
          },
          {
            "contract": "VNFTxV4",
            "label": "_addonId",
            "type": "t_struct(Counter)704_storage",
            "src": "contracts/VNFTxV4.sol:161"
          },
          {
            "contract": "VNFTxV4",
            "label": "cashbackPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:181"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpLostOnBattle",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:183"
          },
          {
            "contract": "VNFTxV4",
            "label": "timesAttacked",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:184"
          },
          {
            "contract": "VNFTxV4",
            "label": "randomBlockSize",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:185"
          },
          {
            "contract": "VNFTxV4",
            "label": "toReceiveCashback",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/VNFTxV4.sol:187"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVNFT)3364": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)3199": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1302": {
            "label": "contract IERC1155"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Addon)1338_storage)": {
            "label": "mapping(uint256 => struct VNFTxV4.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)1044_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)1044_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)704_storage": {
            "label": "struct CountersUpgradeable.Counter"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "f6601e1dc75adcd6856b6b8ba11fa5f80659bddd6b6bd7a0798ee46fb67d4e94": {
      "address": "0x0B36Ef2cb78859C20c8C1380CeAdB75043aA92b3",
      "txHash": "0x145bce5d576639fccb7e4ede0d2b5fccd9e5da81f40c4a05f9c9bf3547e806de",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "VNFTxV4",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV4.sol:114"
          },
          {
            "contract": "VNFTxV4",
            "label": "vnft",
            "type": "t_contract(IVNFT)3364",
            "src": "contracts/VNFTxV4.sol:116"
          },
          {
            "contract": "VNFTxV4",
            "label": "muse",
            "type": "t_contract(IMuseToken)3199",
            "src": "contracts/VNFTxV4.sol:117"
          },
          {
            "contract": "VNFTxV4",
            "label": "addons",
            "type": "t_contract(IERC1155)1302",
            "src": "contracts/VNFTxV4.sol:118"
          },
          {
            "contract": "VNFTxV4",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:120"
          },
          {
            "contract": "VNFTxV4",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1338_storage)",
            "src": "contracts/VNFTxV4.sol:135"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)1044_storage)",
            "src": "contracts/VNFTxV4.sol:137"
          },
          {
            "contract": "VNFTxV4",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)1044_storage",
            "src": "contracts/VNFTxV4.sol:138"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:141"
          },
          {
            "contract": "VNFTxV4",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:142"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:145"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:146"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:147"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:148"
          },
          {
            "contract": "VNFTxV4",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:151"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:152"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:153"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:154"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:156"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:158"
          },
          {
            "contract": "VNFTxV4",
            "label": "_addonId",
            "type": "t_struct(Counter)704_storage",
            "src": "contracts/VNFTxV4.sol:161"
          },
          {
            "contract": "VNFTxV4",
            "label": "cashbackPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:181"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpLostOnBattle",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:183"
          },
          {
            "contract": "VNFTxV4",
            "label": "timesAttacked",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:184"
          },
          {
            "contract": "VNFTxV4",
            "label": "randomBlockSize",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:185"
          },
          {
            "contract": "VNFTxV4",
            "label": "toReceiveCashback",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/VNFTxV4.sol:187"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVNFT)3364": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)3199": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1302": {
            "label": "contract IERC1155"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Addon)1338_storage)": {
            "label": "mapping(uint256 => struct VNFTxV4.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)1044_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)1044_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)704_storage": {
            "label": "struct CountersUpgradeable.Counter"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "31cea06b766be9219e3d59a1ce4aa2dffa07ae079b2013d89ff76cdaeec3d7b0": {
      "address": "0xdFE97385B11cAb514D8890C161534Acb129c03dF",
      "txHash": "0xcfc38ba5cbe61a4e429c108529f8cc3380ffffa5c060824174fcde20eea30c5a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "VNFTxV4",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV4.sol:114"
          },
          {
            "contract": "VNFTxV4",
            "label": "vnft",
            "type": "t_contract(IVNFT)3364",
            "src": "contracts/VNFTxV4.sol:116"
          },
          {
            "contract": "VNFTxV4",
            "label": "muse",
            "type": "t_contract(IMuseToken)3199",
            "src": "contracts/VNFTxV4.sol:117"
          },
          {
            "contract": "VNFTxV4",
            "label": "addons",
            "type": "t_contract(IERC1155)1302",
            "src": "contracts/VNFTxV4.sol:118"
          },
          {
            "contract": "VNFTxV4",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:120"
          },
          {
            "contract": "VNFTxV4",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1338_storage)",
            "src": "contracts/VNFTxV4.sol:135"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)1044_storage)",
            "src": "contracts/VNFTxV4.sol:137"
          },
          {
            "contract": "VNFTxV4",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)1044_storage",
            "src": "contracts/VNFTxV4.sol:138"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:141"
          },
          {
            "contract": "VNFTxV4",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:142"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:145"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:146"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:147"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:148"
          },
          {
            "contract": "VNFTxV4",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:151"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:152"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:153"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:154"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:156"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:158"
          },
          {
            "contract": "VNFTxV4",
            "label": "_addonId",
            "type": "t_struct(Counter)704_storage",
            "src": "contracts/VNFTxV4.sol:161"
          },
          {
            "contract": "VNFTxV4",
            "label": "cashbackPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:181"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpLostOnBattle",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:183"
          },
          {
            "contract": "VNFTxV4",
            "label": "timesAttacked",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:184"
          },
          {
            "contract": "VNFTxV4",
            "label": "randomBlockSize",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:185"
          },
          {
            "contract": "VNFTxV4",
            "label": "toReceiveCashback",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/VNFTxV4.sol:187"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVNFT)3364": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)3199": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1302": {
            "label": "contract IERC1155"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Addon)1338_storage)": {
            "label": "mapping(uint256 => struct VNFTxV4.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)1044_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)1044_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)704_storage": {
            "label": "struct CountersUpgradeable.Counter"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "9333bf1d9bf9f4016d8617b26902ab69f1ef9162765ec5c550dd15230982bdeb": {
      "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      "txHash": "0xb01a84b1c85dc8c492b2938cade563ac0598967a6bb552f14d6ab307ce271dd0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "VNFTxV4",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV4.sol:115"
          },
          {
            "contract": "VNFTxV4",
            "label": "vnft",
            "type": "t_contract(IVNFT)11456",
            "src": "contracts/VNFTxV4.sol:117"
          },
          {
            "contract": "VNFTxV4",
            "label": "muse",
            "type": "t_contract(IMuseToken)11291",
            "src": "contracts/VNFTxV4.sol:118"
          },
          {
            "contract": "VNFTxV4",
            "label": "addons",
            "type": "t_contract(IERC1155)1303",
            "src": "contracts/VNFTxV4.sol:119"
          },
          {
            "contract": "VNFTxV4",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:121"
          },
          {
            "contract": "VNFTxV4",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1339_storage)",
            "src": "contracts/VNFTxV4.sol:136"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)1044_storage)",
            "src": "contracts/VNFTxV4.sol:138"
          },
          {
            "contract": "VNFTxV4",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)1044_storage",
            "src": "contracts/VNFTxV4.sol:139"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:142"
          },
          {
            "contract": "VNFTxV4",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:143"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:146"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:147"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:148"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:149"
          },
          {
            "contract": "VNFTxV4",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:152"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:153"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:154"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:155"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:157"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:159"
          },
          {
            "contract": "VNFTxV4",
            "label": "_addonId",
            "type": "t_struct(Counter)704_storage",
            "src": "contracts/VNFTxV4.sol:162"
          },
          {
            "contract": "VNFTxV4",
            "label": "cashbackPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:182"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpLostOnBattle",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:184"
          },
          {
            "contract": "VNFTxV4",
            "label": "timesAttacked",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:185"
          },
          {
            "contract": "VNFTxV4",
            "label": "randomBlockSize",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:186"
          },
          {
            "contract": "VNFTxV4",
            "label": "toReceiveCashback",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/VNFTxV4.sol:188"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVNFT)11456": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)11291": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1303": {
            "label": "contract IERC1155"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Addon)1339_storage)": {
            "label": "mapping(uint256 => struct VNFTxV4.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)1044_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)1044_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)704_storage": {
            "label": "struct CountersUpgradeable.Counter"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "6e93c570088481671475a08318208488f1840577cca17ed071c75bc59817717f": {
      "address": "0x21dF544947ba3E8b3c32561399E88B52Dc8b2823",
      "txHash": "0x8a11363b9ed5e487941402271e6786620c10273411b33e3b6263a85139bf3f04",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "VNFTxV4",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV4.sol:115"
          },
          {
            "contract": "VNFTxV4",
            "label": "vnft",
            "type": "t_contract(IVNFT)11463",
            "src": "contracts/VNFTxV4.sol:117"
          },
          {
            "contract": "VNFTxV4",
            "label": "muse",
            "type": "t_contract(IMuseToken)11298",
            "src": "contracts/VNFTxV4.sol:118"
          },
          {
            "contract": "VNFTxV4",
            "label": "addons",
            "type": "t_contract(IERC1155)1303",
            "src": "contracts/VNFTxV4.sol:119"
          },
          {
            "contract": "VNFTxV4",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:121"
          },
          {
            "contract": "VNFTxV4",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1339_storage)",
            "src": "contracts/VNFTxV4.sol:136"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)1044_storage)",
            "src": "contracts/VNFTxV4.sol:138"
          },
          {
            "contract": "VNFTxV4",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)1044_storage",
            "src": "contracts/VNFTxV4.sol:139"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:142"
          },
          {
            "contract": "VNFTxV4",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:143"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:146"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:147"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:148"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:149"
          },
          {
            "contract": "VNFTxV4",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:152"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:153"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:154"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:155"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:157"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:159"
          },
          {
            "contract": "VNFTxV4",
            "label": "_addonId",
            "type": "t_struct(Counter)704_storage",
            "src": "contracts/VNFTxV4.sol:162"
          },
          {
            "contract": "VNFTxV4",
            "label": "cashbackPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:182"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpLostOnBattle",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:184"
          },
          {
            "contract": "VNFTxV4",
            "label": "timesAttacked",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:185"
          },
          {
            "contract": "VNFTxV4",
            "label": "randomBlockSize",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:186"
          },
          {
            "contract": "VNFTxV4",
            "label": "toReceiveCashback",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/VNFTxV4.sol:188"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVNFT)11463": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)11298": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1303": {
            "label": "contract IERC1155"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Addon)1339_storage)": {
            "label": "mapping(uint256 => struct VNFTxV4.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)1044_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)1044_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)704_storage": {
            "label": "struct CountersUpgradeable.Counter"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "cb72eaa74cd37e16bd40a7569822e4b77b92ba1a92fdb019ebd5041a4842f5ac": {
      "address": "0x6F6f570F45833E249e27022648a26F4076F48f78",
      "txHash": "0x7a29073700bd67facd1c55607ad40724b1fdb41ab9f8a4d09177e4b274c9cbb4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "VNFTxV4",
            "label": "paused",
            "type": "t_bool",
            "src": "contracts/VNFTxV4.sol:115"
          },
          {
            "contract": "VNFTxV4",
            "label": "vnft",
            "type": "t_contract(IVNFT)11470",
            "src": "contracts/VNFTxV4.sol:117"
          },
          {
            "contract": "VNFTxV4",
            "label": "muse",
            "type": "t_contract(IMuseToken)11305",
            "src": "contracts/VNFTxV4.sol:118"
          },
          {
            "contract": "VNFTxV4",
            "label": "addons",
            "type": "t_contract(IERC1155)1303",
            "src": "contracts/VNFTxV4.sol:119"
          },
          {
            "contract": "VNFTxV4",
            "label": "artistPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:121"
          },
          {
            "contract": "VNFTxV4",
            "label": "addon",
            "type": "t_mapping(t_uint256,t_struct(Addon)1339_storage)",
            "src": "contracts/VNFTxV4.sol:136"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsConsumed",
            "type": "t_mapping(t_uint256,t_struct(UintSet)1044_storage)",
            "src": "contracts/VNFTxV4.sol:138"
          },
          {
            "contract": "VNFTxV4",
            "label": "lockedAddons",
            "type": "t_struct(UintSet)1044_storage",
            "src": "contracts/VNFTxV4.sol:139"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarity",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:142"
          },
          {
            "contract": "VNFTxV4",
            "label": "challengesUsed",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:143"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemScore",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:146"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemId",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:147"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemPrice",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:148"
          },
          {
            "contract": "VNFTxV4",
            "label": "healthGemDays",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:149"
          },
          {
            "contract": "VNFTxV4",
            "label": "premiumHp",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:152"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:153"
          },
          {
            "contract": "VNFTxV4",
            "label": "rarityMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:154"
          },
          {
            "contract": "VNFTxV4",
            "label": "addonsMultiplier",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:155"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedAddons",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:157"
          },
          {
            "contract": "VNFTxV4",
            "label": "expectedRarity",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:159"
          },
          {
            "contract": "VNFTxV4",
            "label": "_addonId",
            "type": "t_struct(Counter)704_storage",
            "src": "contracts/VNFTxV4.sol:162"
          },
          {
            "contract": "VNFTxV4",
            "label": "cashbackPct",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:182"
          },
          {
            "contract": "VNFTxV4",
            "label": "hpLostOnBattle",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:184"
          },
          {
            "contract": "VNFTxV4",
            "label": "timesAttacked",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/VNFTxV4.sol:185"
          },
          {
            "contract": "VNFTxV4",
            "label": "randomBlockSize",
            "type": "t_uint256",
            "src": "contracts/VNFTxV4.sol:186"
          },
          {
            "contract": "VNFTxV4",
            "label": "toReceiveCashback",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/VNFTxV4.sol:188"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IVNFT)11470": {
            "label": "contract IVNFT"
          },
          "t_contract(IMuseToken)11305": {
            "label": "contract IMuseToken"
          },
          "t_contract(IERC1155)1303": {
            "label": "contract IERC1155"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(Addon)1339_storage)": {
            "label": "mapping(uint256 => struct VNFTxV4.Addon)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)1044_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)1044_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_struct(Counter)704_storage": {
            "label": "struct CountersUpgradeable.Counter"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    }
  },
  "admin": {
    "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "txHash": "0x3d9b08057397d1f1c399362a766b54e88bcaa7c108fed93c90329a985a2753b7"
  }
}
